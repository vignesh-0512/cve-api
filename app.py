from flask import Flask, render_template, request, jsonify
import pymysql
import requests
import os

app = Flask(__name__)

DATABASE_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '12345',
    'database': 'cve_db'
}

NVD_API_BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

conn = pymysql.connect(**DATABASE_CONFIG)


def fetch_cves_from_api(start_index=0, results_per_page=100):
    url = f"{NVD_API_BASE_URL}?startIndex={start_index}&resultsPerPage={results_per_page}"
    response = requests.get(url)
    return response.json().get('vulnerabilities', [])


def clean_cve_data(cves):
    cleaned_data = []
    for cve in cves:
        descriptions = [desc['value'] for desc in cve["cve"]["descriptions"]]
        cleaned_data.append({
            'id': cve['cve']['id'],
            'descriptions': descriptions,  # Keep as list for later conversion
            'score': cve.get('impact', {}).get('baseMetricV3', {}).get('cvssV3', {}).get('baseScore', None),
            'published_date': cve['cve']['published'],
            'last_modified': cve['cve']['lastModified']
        })
    return cleaned_data


@app.route('/cves/list', methods=['GET'])
def cve_list():
    page = int(request.args.get('page', 1))
    results_per_page = int(request.args.get('results_per_page', 10))
    offset = (page - 1) * results_per_page

    with conn.cursor(pymysql.cursors.DictCursor) as cursor:
        cursor.execute("SELECT COUNT(*) AS count FROM cves")
        total_records = cursor.fetchone()['count']

        cursor.execute(
            "SELECT * FROM cves LIMIT %s OFFSET %s",
            (results_per_page, offset)
        )
        cves = cursor.fetchall()

    return render_template('index.html', cves=cves, total_records=total_records, results_per_page=results_per_page)


@app.route('/cves/<cve_id>', methods=['GET'])
def cve_details(cve_id):
    with conn.cursor(pymysql.cursors.DictCursor) as cursor:
        cursor.execute("SELECT * FROM cves WHERE id = %s", (cve_id,))
        cve = cursor.fetchone()
    return render_template('cve_details.html', cve=cve)


@app.route('/sync', methods=['POST'])
def sync_cves():
    cves = fetch_cves_from_api()
    clean_cves = clean_cve_data(cves)

    with conn.cursor() as cursor:
        for cve in clean_cves:
            # Convert descriptions list to a string
            descriptions_str = ', '.join(cve['descriptions'])
            cursor.execute(
                """
                INSERT INTO cves (id, descriptions, score, published_date, last_modified) 
                VALUES (%s, %s, %s, %s, %s)
                ON DUPLICATE KEY UPDATE 
                descriptions = VALUES(descriptions), 
                score = VALUES(score),
                last_modified = VALUES(last_modified)
                """,
                (cve['id'], descriptions_str, cve['score'], cve['published_date'], cve['last_modified'])
            )

        conn.commit()

    return jsonify({'message': 'Data synchronized successfully!'})


if __name__ == "__main__":
    app.run(debug=True)
